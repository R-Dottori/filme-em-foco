
# Importa√ß√µes
import streamlit as st
import requests
import pandas as pd
import json
import google.generativeai as genai
import os
import time
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
from nltk.corpus import stopwords
import nltk



# Configura√ß√µes
st.set_page_config(
    page_title='Filme em Foco',
    page_icon='üé•',
)

api_key = os.getenv('GEMINI_KEY')
genai.configure(api_key=api_key)
modelo = genai.GenerativeModel('gemini-1.5-flash')


nltk.download('stopwords')

pag_1_title = 'Recomenda√ß√µes'
pag_2_title = 'An√°lise de Sentimentos'
pag_3_title = 'Filmes Em Cartaz'
pag_4_title = 'Outros Filmes'
pag_5_title = 'Op√ß√µes'


if all(key not in st.session_state for key in ['base_filmes', 'df_base', 'em_cartaz_df', 'em_cartaz_json', 'historico_chatbot', 'infos_usuario']):
    try:
        resp_filmes = requests.get('http://127.0.0.1:8000/top_250').text
        st.session_state['base_filmes'] = json.loads(resp_filmes)
        st.session_state['df_base'] = pd.DataFrame(st.session_state['base_filmes'])
        resp_cartaz = requests.get('http://127.0.0.1:8000/em_cartaz').text
        em_cartaz_json = json.loads(resp_cartaz)
        em_cartaz_df = pd.DataFrame(em_cartaz_json)
        st.session_state['em_cartaz_df'] = em_cartaz_df
        st.session_state['em_cartaz_json'] = em_cartaz_json
        st.session_state['historico_chatbot'] = ''
        st.session_state['infos_usuario'] = ''
    except:
        st.error('Erro ao comunicar com a API.')



# Fun√ß√µes de Uso Geral
def chatbot(prompt):
    with open('./cache/infos_usuario.txt', 'r', encoding='utf-8') as arquivo:
        historico_usuario = arquivo.read()
        
    instrucoes = f"""
    Voc√™ √© um chatbot altamente sofisticado e especialista em cinema.

    Voc√™ tem acesso aos filmes que est√£o atualmente em cartaz.
    Priorize que as sugest√µes sejam para os filmes em cartaz, caso algum encaixe nos gostos do usu√°rio.

    Voc√™ tamb√©m tem acesso a uma base de dados de filmes com as seguintes colunas:
    titulo - titulo_original - ano - duracao - diretor - roteirista - elenco - nota - num_votos - sinopse - genero - verba - receita
    A dura√ß√£o dos filmes na coluna duracao est√° em minutos. Por exemplo: 120 = 2 horas; 60 = 1 hora; 90 = 1 hora e 30 minutos.
    Caso a coluna de verba e/ou receita estejam iguais a 0, considere que o dado n√£o foi coletado corretamente e n√£o que esses sejam os valores observados.
    Voc√™ SEMPRE tem acesso a essa base, independente do seu hist√≥rico de mensagens.
    Caso existam conflitos entre as informa√ß√µes da base e seu treinamento pr√©vio, d√™ prioridade para a base fornecida.
    
    Um de seus objetivos √© dar sugest√µes de filmes para os usu√°rios, baseando-se na base de dados, nos filmes em cartaz e nas prefer√™ncias do usu√°rio.
    Caso sinta que a pergunta do usu√°rio n√£o √© suficiente para gerar uma resposta adequada, indique como o usu√°rio pode incrementar a sua pergunta.
    MESMO ASSIM, sempre complete a sugest√£o, ainda que a resposta n√£o seja ideal.
    Se nenhum dos filmes em cartaz for parecido com o pedido do usu√°rio, indique um filme da outra base.

    Voc√™ tem acesso a todo o hist√≥rico de conversas da sess√£o que estiver rodando.
    Consulte o hist√≥rico, mas n√£o exiba seu conte√∫do a n√£o ser que seja explicitamente solicitado.
    Caso o hist√≥rico de mensagens esteja vazio, ignore-o.

    Durante a conversa, separe informa√ß√µes importantes sobre os gostos do usu√°rio.
    Isso inclui filmes que gosta, g√™neros que desgosta e outros interesses para al√©m do cinema.
    Salve tamb√©m informa√ß√µes b√°sicas que identifiquem o usu√°rio, como nome, sobrenome, apelido, idade.
    NUNCA inclua informa√ß√µes sigilosas como n√∫mero de documentos.
    NUNCA inclua aspectos da personalidade do usu√°rio, mesmo que sejam descritos pelo pr√≥prio usu√°rio.
    Salve essas informa√ß√µes de maneira objetiva, iniciando esse segmento com "[INFOS_USUARIO]".
    Voc√™ ter√° acesso ao hist√≥rico de informa√ß√µes que coletou do usu√°rio.
    Se existir mais de uma informa√ß√£o sobre um t√≥pico mas que n√£o seja conflitante, considere ambas.
    Se as informa√ß√µes forem diretamente conflitantes, considere somente a mais recente.
    Crie esse segmento SOMENTE se identificar novas informa√ß√µes na PERGUNTA DO USU√ÅRIO.
    N√£o gere nenhuma informa√ß√£o adicional caso n√£o identifique algo relevante na pergunta.
    As informa√ß√µes passadas s√£o consideradas, mas n√£o precisam ser exibidas a n√£o ser que sejam explicitamente solicitadas.
    Caso as informa√ß√µes estejam vazias, ignore-as.

    ‚Ä¢ Exemplo de informa√ß√µes importantes:
    "Boa noite! Me chamo Jo√£o" -- [INFOS_USUARIO] Nome do usu√°rio √© Jo√£o
    "Meu filme favorito √© Chinatown mas n√£o gosto muito do Jack Nicholson" -- [INFOS_USUARIO] Filme favorito √© Chinatown / N√£o gosta tanto do ator Jack Nicholson
    "Estou bem... me indica um filme?" -- Nenhuma informa√ß√£o relevante
    "Meu filme favorito √© Karate Kid" -- [INFOS_USUARIO] Filme favorito √© Karate Kid (nesse caso, ainda considere Chinatown)
    "Eu sou muito alegre!" -- N√£o considere informa√ß√µes sobre a personalidade
    "Adoro filmes alegres" -- Nesse caso, o usu√°rio est√° falando sobre seus interesses -- [INFOS_USUARIO] Gosta de filmes alegres
    "Eu sou a Ana! Tudo bem com voc√™?" -- [INFOS_USUARIO] Nome do usu√°rio √© Ana (nesse caso, provavelmente desconsidere o nome Jo√£o)

    Ao final de tudo, responda a pergunta do usu√°rio, iniciando o segmento da resposta com "[RESPOSTA_CHATBOT]".
    Tente manter as respostas concissas, curtas e direto ao ponto.
    Tente completar as sugest√µes sempre, mesmo que n√£o tenha informa√ß√µes o suficiente.

    ‚Ä¢ Base de Filmes:
    {st.session_state['base_filmes']}

    ‚Ä¢ Filmes Atualmente em Cartaz:
    {st.session_state['em_cartaz_json']}

    ‚Ä¢ Hist√≥rico de Mensagens:
    {st.session_state['historico_chatbot']}

    ‚Ä¢ Informa√ß√µes do Usu√°rio:
    {historico_usuario}
    
    ‚Ä¢ Pergunta do Usu√°rio:
    {prompt}
    """

    respostas_bruto = modelo.generate_content(instrucoes).text.split('[')
    for segmento in respostas_bruto:
        if 'INFOS_USUARIO' in segmento:
            pos = segmento.find(']') + 1
            infos_usuario = segmento[pos:]
            with open('./cache/infos_usuario.txt', 'a', encoding='utf-8') as arquivo:
                arquivo.write(infos_usuario)

        if 'RESPOSTA_CHATBOT' in segmento:
            pos = segmento.find(']') + 1
            resposta = segmento[pos:]
            st.session_state['historico_chatbot'] += '‚Ä¢ Pergunta do Usu√°rio:\n'
            st.session_state['historico_chatbot'] += prompt.strip()
            st.session_state['historico_chatbot'] += '\n‚Ä¢ Resposta do Chatbot:\n'
            st.session_state['historico_chatbot'] += resposta.strip()
            st.session_state['historico_chatbot'] += '\n\n'

    try:
        return resposta
    except:
        return 'Desculpa! N√£o foi poss√≠vel gerar uma resposta.'


def analise_sentimentos(filme):
    if filme['analises'] != '[]':
        analises = '---'.join(filme['analises'])
        resultado = modelo.generate_content(f"""
                Voc√™ √© um especialista em cinema.
                Realize a an√°lise de sentimentos de cada opini√£o de usu√°rio abaixo.
                As opini√µes est√£o separadas por "---".
                Ao final conte quantas an√°lises s√£o positivas e quantas negativas.
                Al√©m disso, crie um resumo da opini√£o do p√∫blico, em portugu√™s.
                Responda SOMENTE com os resultados.

                Exemplo de resposta:
                    POSITIVAS = 15
                    NEGATIVAS = 3
                    CONSENSO = O consenso √© este...

                    {analises}
                    """).text
        pos_posit = resultado.find('POSITIVAS')
        pos_negat = resultado.find('NEGATIVAS')
        pos_cons = resultado.find('CONSENSO')
        analises_pos = int(resultado[pos_posit + 11:pos_negat].strip())
        analises_neg = int(resultado[pos_negat + 11:pos_cons].strip())
        num_analises = analises_pos + analises_neg
        consenso = resultado[pos_cons + 10:].strip()
    else:
        num_analises = 0
        analises_pos = 0
        analises_neg = 0
        consenso = 0
    
    if num_analises > 5:
        perc_pos = round(analises_pos / num_analises * 100)
        perc_neg = round(analises_neg / num_analises * 100)
        st.write(f'Consenso das Opini√µes: {consenso}')
        st.write(f'Avalia√ß√µes Positivas: {perc_pos}%')
        st.write(f'Avalia√ß√µes Negativas: {perc_neg}%')
        fig, ax = plt.subplots()
        ax.bar(['An√°lises Positivas', 'An√°lises Negativas'], [perc_pos, perc_neg], color=['green', 'red'])
        ax.set_title('Visualiza√ß√£o')
        ax.set_ylabel('Percentual')
        st.pyplot(fig)
    else:
        st.write('N√£o h√° avalia√ß√µes suficientes para realizar a an√°lise.')

# Conte√∫do das P√°ginas
def pagina_um():
    st.title('Filme em Foco')

    st.header('Alfred Hitchbot')

    avatares = {
    'human': 'user',
    'ai': 'assistant'
    }

    st.chat_message('assistant').write("""Ol√°! Sou o Alfred Hitchbot, um assistente virtual especializado em cinema.

    \nMe fa√ßa qualquer pergunta!

    \nSe quiser uma sugest√£o de filme, me conte um pouquinho sobre o que est√° procurando, como seu filme favorito ou um g√™nero espec√≠fico.
    """)

    if st.session_state['historico_chatbot'] != '':
        for mensagem in st.session_state['historico_chatbot'].split('‚Ä¢ Pergunta do Usu√°rio'):
            if mensagem != '':
                pos_bot = mensagem.find('‚Ä¢ Resposta do Chatbot')
                st.chat_message('user').write(mensagem[2:pos_bot].strip())
                st.chat_message('assistant').write(mensagem[pos_bot + 23:].strip())

    if prompt := st.chat_input('Digite sua mensagem'):
        st.chat_message('user').write(prompt)
        with st.spinner('Processando...'):
            resposta = chatbot(prompt)
            st.chat_message('assistant').write(resposta)

def pagina_dois():
    st.title(pag_2_title)
    opcoes_sel = [filme['titulo'] for filme in st.session_state['em_cartaz_json']]
    selecao = st.selectbox('Escolha um filme:', options=opcoes_sel)
    filme_sel = next(filme for filme in st.session_state['em_cartaz_json'] if filme['titulo'] == selecao)
    if st.button('Gerar an√°lise'):
        with st.spinner('Processando...'):
            analise_sentimentos(filme_sel)
    

def pagina_tres():
    st.title(pag_3_title)
    try:
        for filme in st.session_state['em_cartaz_json']:
            poster, infos = st.columns(2)
            with poster:
                st.image(filme['poster'])
            with infos:
                st.markdown(f"""
                # {filme['titulo']}
                ### {filme['ano']} - {filme['duracao']} minutos

                Dire√ß√£o: {''.join(filme['diretor']).replace('[','').replace(']','').replace("'", '').replace('"', '')}

                Elenco: {''.join(filme['elenco']).replace('[','').replace(']','').replace("'", '').replace('"', '')}

                Sinopse:
                {filme['sinopse']}

                [Ver sess√µes](https://www.ingresso.com/filme/{filme['titulo'].lower().replace(' ','-').replace(':','')})
                """)
    except:
        st.error('Erro ao carregar os filmes em cartaz.')



def pagina_quatro():
    st.title(pag_4_title)
    st.header('Lista de Filmes')
    st.write(st.session_state['df_base'])

    st.header('Visualiza√ß√µes')

    generos_bruto = [genero for genero in st.session_state['df_base']['genero']]
    generos = []
    for genero in generos_bruto:
        genero = genero.replace('[', '').replace(']', '').replace(',', '').replace("'", '')
        genero = genero.split()
        for x in genero:
            if x == 'Adicionar' or x == 'aviso' or x == 'de' or x == 'conte√∫do' or x == 'cient√≠fica' or x == 'Filme':
                pass
            else:
                if x == 'Fic√ß√£o':
                    x = 'Fic√ß√£o Cient√≠fica'
                if x == 'noir':
                    x = 'Noir'
                generos.append(x)

    df_generos = pd.DataFrame(generos, columns=['genero'])

    plt.figure()
    sns.countplot(data=df_generos, y='genero', hue='genero', order=df_generos['genero'].value_counts().index)
    plt.title('Frequ√™ncia de G√™neros')
    plt.xlabel('Contagem')
    plt.ylabel('G√™nero')
    st.pyplot(plt)

    with st.spinner('Carregando...'):
        sinopses = ' '.join(st.session_state['df_base']['sinopse'].astype(str))
        stop_words = set(stopwords.words('portuguese'))
        nuvem = WordCloud(
            width=1000, 
            height=500,
            background_color='white',
            stopwords=stop_words,
        ).generate(sinopses)

        plt.figure()
        plt.imshow(nuvem)
        plt.axis('off')
        plt.title('Nuvem de Palavras das Sinopses')
        st.pyplot(plt)


def pagina_cinco():
    st.title(pag_5_title)
    if st.button('Apagar cache do usu√°rio'):
        with open('./cache/infos_usuario.txt', 'w', encoding='utf-8') as arquivo:
            arquivo.write('')
        st.success('Cache apagado.')



# Menu de Navega√ß√£o
st.sidebar.title('Navega√ß√£o')
pagina = st.sidebar.radio(label='Escolha uma p√°gina:', options=(pag_1_title, pag_2_title, pag_3_title, pag_4_title, pag_5_title))
if pagina == pag_1_title:
    pagina_um()
elif pagina == pag_2_title:
    pagina_dois()
elif pagina == pag_3_title:
    pagina_tres()
elif pagina == pag_4_title:
    pagina_quatro()
else:
    pagina_cinco()
